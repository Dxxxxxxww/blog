/* @flow */

import VNode, { createTextVNode } from 'core/vdom/vnode'
import { isFalse, isTrue, isDef, isUndef, isPrimitive } from 'shared/util'

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// 当 children 包含组件，——因为函数式组件可能返回Array而不是单个根。
// may return an Array instead of a single root. In this case, just a simple
// 这种情况下，一种简单的 normalization 是需要的
// normalization is needed - if any child is an Array, we flatten the whole
// 如果任何子对象是Array，则使用Array.prototype.concat将其整平
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
// 它保证只有1级的深度，因为函数式组件早就规范化了他们的子组件。
// 二维数组转为一维数组
export function simpleNormalizeChildren (children: any) {
  for (let i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      // 骚操作，用 concat + apply 来拍平数组
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested(内嵌的) Arrays,
// 当子元素包含总是生成嵌套数组的结构时
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX.
// 例如 <template>, <slot>, v-for，或者用户自己手写的 render函数 / jsx
// In such cases a full normalization is needed to cater(满足，迎合) to all possible types of children values.
// 在这种情况下，需要对所有可能类型的子项值进行全面的规范化。
// 用户传入的 render，children 有可能是 数组/原始值。
// 不管用户传入什么，最终返回一维数组
export function normalizeChildren (children: any): ?Array<VNode> {
  // 判断 children 是否是原始值
  return isPrimitive(children)
    // 是原始值，创建文本vnode，再用数组包裹
    ? [createTextVNode(children)]
    // 是数组，通过递归，把多维数组拍平成一维数组
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

function isTextNode (node): boolean {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

function normalizeArrayChildren (children: any, nestedIndex?: string): Array<VNode> {
  const res = []
  let i, c, lastIndex, last
  for (i = 0; i < children.length; i++) {
    c = children[i]
    if (isUndef(c) || typeof c === 'boolean') continue
    lastIndex = res.length - 1
    last = res[lastIndex]
    //  nested
    // 遍历项为数组：多见于v-for或者slot的时候，会出现嵌套VNode数组的情况
    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, `${nestedIndex || ''}_${i}`)
        // merge adjacent text nodes
        // 如果存在两个连续的文本节点，则将其合并成一个文本节点。
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + (c[0]: any).text)
          c.shift()
        }
        res.push.apply(res, c)
      }
    //  遍历项为基础类型：当为基础类型的时候，调用封装的createTextVNode方法来创建一个文本节点，然后push到结果数组中。
    } else if (isPrimitive(c)) {
        // 如果存在两个连续的文本节点，则将其合并成一个文本节点。
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c)
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c))
      }
    //  遍历项已经是VNode类型：这种情况最简单，如果不属于以上两种情况，那么代表本身已经是VNode类型了，这时候我们什么都不需要做，直接push到结果数组中即可。
    } else {
      // 如果存在两个连续的文本节点，则将其合并成一个文本节点。
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text)
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = `__vlist${nestedIndex}_${i}__`
        }
        res.push(c)
      }
    }
  }
  return res
}
