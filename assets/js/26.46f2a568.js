(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{229:function(t,e,a){"use strict";a.r(e);var r=a(0),i=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git-后悔药"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-后悔药"}},[t._v("#")]),t._v(" git 后悔药")]),t._v(" "),a("p",[t._v("在平常开发过程中，总会有疏忽大意的时候，比如说需求写错开发分支，错误提交了又想撤回来。这时候要怎么办呢？下面记录几种撤回方法。")]),t._v(" "),a("h2",{attrs:{id:"前置知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前置知识"}},[t._v("#")]),t._v(" 前置知识")]),t._v(" "),a("p",[a("img",{attrs:{src:"/git/git_01.png",alt:"image"}})]),t._v(" "),a("p",[t._v("如图所示，我们本地的 git 是分为三个区域的，从左到右分别是：工作区，暂存区，当前分支。")]),t._v(" "),a("ol",[a("li",[t._v("当输入 git add . 时，代码会从工作区提交到暂存区。"),a("b",[t._v("工作区 -> 暂存区")]),t._v("。")]),t._v(" "),a("li",[t._v("当输入 git commit 时，代码就会从暂存区提交到本地分支，这时候已经产生提交记录了。"),a("b",[t._v("暂存区 -> 本地分支")]),t._v("。")]),t._v(" "),a("li",[t._v("当输入 git push 时，代码会从本地分支提交到远端分支。"),a("b",[t._v("本地分支 -> 远端分支")])])]),t._v(" "),a("p",[t._v("所以实际上，整个 git 流程是有 4 个部分的：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/git/git_02.png",alt:"image"}})]),t._v(" "),a("h2",{attrs:{id:"后悔药"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#后悔药"}},[t._v("#")]),t._v(" 后悔药")]),t._v(" "),a("ul",[a("li",[t._v("git checkout .")]),t._v(" "),a("li",[t._v("git reset")]),t._v(" "),a("li",[t._v("git reset --soft xxx: 移动 head 指针到对应的 hash，将修改的代码放到"),a("b",[t._v("暂存区")]),t._v("中")]),t._v(" "),a("li",[t._v("git reset --mixed xxx: 移动 head 指针到对应的 hash，将修改的代码放到"),a("b",[t._v("工作区")]),t._v("中")]),t._v(" "),a("li",[t._v("git reset --hard xxx: 移动 head 指针到对应的 hash，将修改的代码删除。")])]),t._v(" "),a("p",[t._v("场景一：修改了代码但是还没有执行 git add。可以使用 git checkout .")]),t._v(" "),a("p",[t._v("场景二：修改了代码并且 git add 了。可以先用 git reset 将代码从暂存区撤回。这时候代码就回到了 git add 之前的状态。")]),t._v(" "),a("p",[t._v("场景三：已经 commit 了但是还没有 push。这时候可以用 git reset --soft 或者 git reset --mixed")]),t._v(" "),a("p",[t._v("场景四：已经 push 了，这时候可以使用 git reset --hard。但是要注意的是，这时候修改完代码，再往远端推，由于远端的分支领先，所以会报冲突，如果自认代码没问题，就可以使用 git push -f 来强制推送。")]),t._v(" "),a("p",[t._v("其实场景三，场景四的使用命令都是相通的，无非是看你还想不想要修改的代码。")]),t._v(" "),a("h2",{attrs:{id:"资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#资料"}},[t._v("#")]),t._v(" 资料")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/shufac/article/details/51758438",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里是资料 1"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/edric1261234/article/details/82796506",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里是资料 2"),a("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=i.exports}}]);