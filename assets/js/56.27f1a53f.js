(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{263:function(t,a,s){"use strict";s.r(a);var e=s(0),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"react-状态管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react-状态管理"}},[t._v("#")]),t._v(" react 状态管理")]),t._v(" "),s("h2",{attrs:{id:"react-query"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react-query"}},[t._v("#")]),t._v(" react-query")]),t._v(" "),s("h2",{attrs:{id:"redux"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redux"}},[t._v("#")]),t._v(" redux")]),t._v(" "),s("p",[t._v("redux 是 js 可预测的状态管理容器，它有着三大核心概念 Action，Reducer，Store。")]),t._v(" "),s("p",[t._v("react-redux 作为一种桥梁，它把 redux 中的数据和 reac-component 连接在一起，把 store 中的数据变成组件中的状态。当 store 中的数据改变了，页面也会重新渲染。")]),t._v(" "),s("p",[t._v("目前 redux 官方推荐 redux-toolkit")]),t._v(" "),s("h3",{attrs:{id:"为什么-reducer-需要保持同步？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么-reducer-需要保持同步？"}},[t._v("#")]),t._v(" 为什么 reducer 需要保持同步？")]),t._v(" "),s("p",[t._v("原因：我们要保持 reducer 的纯洁性，保持它是可预测的。因为在函数式编程中，异步是被认为是副作用(每次即使传入相同的参数，返回也可能不同)的。比如说请求可能成功，也可能失败，或者在获取信息的同时，另一个地方更新了信息，导致每次的返回也会不同。它是不可预测的。\n"),s("b",[t._v("注：reducer 需要保持同步不意味着 dispatch 一定要在同步中使用，它可以在异步函数中调用。")])]),t._v(" "),s("p",[t._v("所以 reducer 必须是一个同步函数，且是纯函数。")]),t._v(" "),s("p",[t._v("reducer 的设计理念与 react 是相同的，它们判断数据是否变化，就是简单粗暴的通过 '===' 来判断。")]),t._v(" "),s("p",[t._v("dispatch 一定要在同步中使用，它可以在异步函数中调用，那么为什么还需要 redux-thunk 呢？")]),t._v(" "),s("p",[t._v("redux-thunk，它可以让组件不用关心异步的细节，可以像是使用同步的形式去使用异步的 dispatch。异步的细节就可以统一在专门放在异步请求的文件中做处理。")]),t._v(" "),s("h3",{attrs:{id:"redux-thunk"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redux-thunk"}},[t._v("#")]),t._v(" redux-thunk")]),t._v(" "),s("p",[t._v("用于处理在组件中的异步 dispatch(主要是用于接口请求)，这样可以让组件不用关心调用的是同步还是异步(让异步代码的调用跟同步的 action creator 一样)，异步成功还是失败也不需要额外的去处理。")]),t._v(" "),s("p",[t._v("当 dispatch 一个函数时，redux-thunk 会对其进行拦截，然后传入一些参数并执行这个函数。")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" createThunkMiddleware"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("\n    State "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    BasicAction "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Action")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" AnyAction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    ExtraThunkArg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" undefined\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("extraArgument"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ExtraThunkArg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Standard Redux middleware definition pattern:")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// See: https://redux.js.org/tutorials/fundamentals/part-4-store#writing-custom-middleware")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" middleware"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ThunkMiddleware"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("State"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" BasicAction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ExtraThunkArg"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        dispatch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        getState\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("next")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("action")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The thunk middleware looks for any functions that were passed to `store.dispatch`.")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// If this "action" is really a function, call it and return the result.')]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" action "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"function"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// Inject the store\'s `dispatch` and `getState` methods, as well as any "extra arg"')]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("action")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dispatch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" getState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" extraArgument"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Otherwise, pass the action down the middleware chain as usual")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("action"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" middleware"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);