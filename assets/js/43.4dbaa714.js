(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{243:function(t,s,a){"use strict";a.r(s);var r=a(0),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"前端模块化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端模块化"}},[t._v("#")]),t._v(" 前端模块化")]),t._v(" "),a("h2",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),a("p",[t._v("模块化是把复杂的代码按照功能的不同划分为不同的模块来单独维护，提高开发效率，降低维护成本的一种思想。")]),t._v(" "),a("h2",{attrs:{id:"模块化演变"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模块化演变"}},[t._v("#")]),t._v(" 模块化演变")]),t._v(" "),a("ol",[a("li",[t._v("文件划分方式：不同功能存放到不同的 js 文件中，约定每个 js 文件就是模块。缺点：每个 js 文件都绑定在全局下，污染全局作用域，在外部可以被修改，容易产生明明冲突。也无法管理模块之间的依赖关系。")]),t._v(" "),a("li",[t._v("命名空间方式：在文件划分上更进一步，js 文件内部只暴露一个对象，属性方法都在对象内部实现，相当于添加了命名空间。减少了命名冲突可能，但是仍然没有私有空间。依赖关系也无法解决。")]),t._v(" "),a("li",[t._v("IIFE：解决了私有空间。可以使用函数参数来解决依赖关系。")])]),t._v(" "),a("p",[t._v("除此之外，在模块化出现之前，js 文件都需要手动去引入，增加了出错的可能性。")]),t._v(" "),a("h2",{attrs:{id:"模块化规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模块化规范"}},[t._v("#")]),t._v(" 模块化规范")]),t._v(" "),a("ul",[a("li",[t._v("AMD(异步模块定义，浏览器端)：淘汰了")]),t._v(" "),a("li",[t._v("CMD(通用模块定义，浏览器端)：淘汰了")]),t._v(" "),a("li",[t._v("ESM(浏览器端)：ES 在语言层面实现的")]),t._v(" "),a("li",[t._v("CommonJS 规范(node 端)：(以同步模式加载模块)")])]),t._v(" "),a("h3",{attrs:{id:"commonjs-特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commonjs-特性"}},[t._v("#")]),t._v(" CommonJS 特性")]),t._v(" "),a("ol",[a("li",[t._v("一个文件就是一个模块；")]),t._v(" "),a("li",[t._v("每个模块有单独的作用域；")]),t._v(" "),a("li",[t._v("通过 module.exports 导出；")]),t._v(" "),a("li",[t._v("通过 require 导入；")]),t._v(" "),a("li",[t._v("(同步模式加载模块，这在浏览器端就会有问题，每次浏览器加载新页面，就有有大量的同步请求模块出现。node 的执行机制是在启动时加载模块，执行过程当中只需要使用模块。)")])]),t._v(" "),a("h3",{attrs:{id:"esm-特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#esm-特性"}},[t._v("#")]),t._v(" ESM 特性")]),t._v(" "),a("p",[t._v('通过给 script 添加 type="module" 的属性，就可以以 ESM 的标准执行其中的 JS')]),t._v(" "),a("ol",[a("li",[t._v("ESM 自动采用严格模式；")]),t._v(" "),a("li",[t._v("每个 ESM 都是私有作用域；")]),t._v(" "),a("li",[t._v("ESM 是通过 CORS 的方式请求外部 JS 模块；")])]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("支持cors的链接"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token script"}}),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("ol",{attrs:{start:"4"}},[a("li",[t._v("ESM 的 script 会延时执行脚本，相当于添加了 defer。")])]),t._v(" "),a("h4",{attrs:{id:"defer-async"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#defer-async"}},[t._v("#")]),t._v(" defer async")]),t._v(" "),a("p",[t._v("defer 属性的运行流程如下。")]),t._v(" "),a("ol",[a("li",[t._v("浏览器开始解析 HTML 网页。")]),t._v(" "),a("li",[t._v("解析过程中，发现带有 defer 属性的<script>元素。")]),t._v(" "),a("li",[t._v("浏览器继续往下解析 HTML 网页，同时并行下载<script>元素加载的外部脚本。")]),t._v(" "),a("li",[t._v("浏览器完成解析 HTML 网页，此时再回过头执行已经下载完成的脚本。")])]),t._v(" "),a("p",[t._v("async 属性的作用是，使用另一个进程下载脚本，下载时不会阻塞渲染。")]),t._v(" "),a("ol",[a("li",[t._v("浏览器开始解析 HTML 网页。")]),t._v(" "),a("li",[t._v("解析过程中，发现带有 async 属性的 script 标签。")]),t._v(" "),a("li",[t._v("浏览器继续往下解析 HTML 网页，同时并行下载<script>标签中的外部脚本。")]),t._v(" "),a("li",[t._v("脚本下载完成，浏览器暂停解析 HTML 网页，开始执行下载的脚本。")]),t._v(" "),a("li",[t._v("脚本执行完毕，浏览器恢复解析 HTML 网页。")])]),t._v(" "),a("h2",{attrs:{id:"commonjs-esm-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commonjs-esm-的区别"}},[t._v("#")]),t._v(" CommonJs ESM 的区别")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("输出的区别")]),t._v(" "),a("p",[t._v("require/exports 输出的是值的拷贝，一旦输出了某个值，模块内部后续变化，影响不到外部对这个值的引用。\nimport/export 输出的是引用。")])]),t._v(" "),a("li",[a("p",[t._v("加载的区别")]),t._v(" "),a("p",[t._v("CommonJS 加载的是一个对象（即 module.exports 属性），该对象只有在脚本运行完才会生成，而且只会生成一次。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成，这样我们就可以使用各种工具对 JS 模块进行依赖分析，优化代码。")])])]),t._v(" "),a("h3",{attrs:{id:"注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[t._v("#")]),t._v(" 注意事项")]),t._v(" "),a("p",[t._v("ESM 导入导出不是解构，是固定语法。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// export 导出的不是一个字面量对象，{} 是固定语法，提取模块中的命名成员")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 导出字面量是不行的")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" form "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xx'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里的 {} 不是解构")]),t._v("\n")])])]),a("hr"),t._v(" "),a("p",[t._v("Commonjs 始终只会导出一个默认成员")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("原生 node 环境中(8.5 以上)，实验特性支持 ESM 导入 Commonjs，不支持 Commonjs 导入 ESM")]),t._v(" "),a("h2",{attrs:{id:"为什么不在浏览器也是用-commonjs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么不在浏览器也是用-commonjs"}},[t._v("#")]),t._v(" 为什么不在浏览器也是用 CommonJS")]),t._v(" "),a("p",[t._v("CommonJS 的 require 语法是同步的，当我们使用 require 加载一个模块的时候，必须要等这个模块加载完后，才会执行后面的代码。NodeJS 是服务端，使用 require 语法加载模块，一般是一个文件，只需要从本地硬盘中读取文件，它的速度是比较快的。但是在浏览器端就不一样了，文件一般存放在服务器或者 CDN 上，如果使用同步的方式加载一个模块还需要由网络来决定快慢，可能时间会很长，这样浏览器很容易进入“假死状态”。所以才有了后面的 AMD 和 CMD 模块化方案，它们都是异步加载的，比较适合在浏览器端使用。")]),t._v(" "),a("p",[t._v('这里的模块化指的是 script 上的 type="module"，不是实现的 CommonJS 规范。')]),t._v(" "),a("h2",{attrs:{id:"其他"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),a("p",[t._v("编译：把源文件转换成二进制语言，变成系统可执行文件。")]),t._v(" "),a("p",[t._v("运行：把编译出来的可执行文件，在系统中运行的过程。")]),t._v(" "),a("p",[t._v("项目在 build 之后，都是在 index 页面通过 script 加载，而且项目中 import 和 require 都可以使用，并没有同步 require 异步 import 的说法。")])])}),[],!1,null,null,null);s.default=e.exports}}]);